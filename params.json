{"name":"Social-cms-backend","tagline":"Express middleware to provide schema-less REST APIs for creating a social networking website primarily using angular.js. It comes with built-in authentication, authorization and notification features.","body":"social-cms-backend\r\n==================\r\n\r\nExpress middleware to provide schema-less REST APIs for creating a social networking website primarily using angular.js. It comes with built-in authentication, authorization and notification features.\r\n\r\nMotivation\r\n----------\r\n\r\nThere exists several MVC framework libraries for node.js\r\nthat are inspired by Rails.  But they might be a bit outdated,\r\nwhen it comes to angular.js, client-side MVW framework.\r\nI would like to propose a maybe new style of web programming,\r\nwhich is the combination of a domain-specific REST API library\r\n(ready to use, no coding required) and client-side coding.\r\n\r\nThis project is to provide such a library for a web site\r\nlike SNS/Twitter/Facebook in a closed/private environment.\r\n\r\nHow to install\r\n--------------\r\n\r\n    $ npm install social-cms-backend\r\n\r\nHow to use\r\n----------\r\n\r\n    var express = require('express');\r\n    var SCB = require('social-cms-backend');\r\n    var app = express();\r\n    app.use(SCB.middleware({\r\n      mongodb_url: 'mongodb://localhost:27017/socialcmsdb',\r\n      passport_strategy: 'facebook',\r\n      facebook_app_id: process.env.FACEBOOK_APP_ID,\r\n      facebook_app_secret: process.env.FACEBOOK_APP_SECRET\r\n    }));\r\n    app.listen(3000);\r\n\r\nREST APIs\r\n---------\r\n\r\nBy default, there are 4 objects:\r\n* post\r\n* user\r\n* group\r\n* like\r\n\r\nThe following is the example of the post object endpoints.\r\n\r\n    POST /posts           (body: a JSON w/o system preserved keys)\r\n\r\n    GET /posts?query=...  (query: MongoDB query parameter stringified)\r\n\r\n    GET /posts/inbox\r\n\r\n    GET /posts/count?query=...\r\n\r\n    GET /posts/123\r\n\r\n    PUT /posts/123        (body: MongoDB update object)\r\n\r\n    DELETE /posts/123\r\n\r\nA special endpoint:\r\n\r\n    GET /users/myself\r\n\r\nScreencast\r\n----------\r\n\r\n### How to create a Twitter clone in 15 minutes\r\n\r\nScreencast preview (quadruple speed):\r\n\r\n![Preview](http://dai-shi.github.io/social-cms-backend/ttyrecord.gif)\r\n\r\n<a href=\"http://dai-shi.github.io/social-cms-backend/ttyplay.html\" target=\"_blank\">Controllable screencast at normal speed</a>\r\n\r\nNotes:\r\n\r\n* There is a typo found after the recording.\r\n  `/javascript/main.js -> /javascripts/main.js`\r\n* The resulting code is available\r\n  [here](https://github.com/dai-shi/twitter-clone-sample/tree/20130804_recorded)\r\n* You can try the running web service of the code\r\n  <a href=\"http://twitterclonesample-nodeangularapp.rhcloud.com/\" target=\"_blank\">here</a>\r\n\r\nTODOs\r\n-----\r\n\r\n* Authentication: email(digest auth)\r\n* Notification: email, facebook\r\n* Realtime support (socket.io)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}